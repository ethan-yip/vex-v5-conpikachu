{"mode":"Text","hardwareTarget":"brain","textContent":"#region VEXcode Generated Robot Configuration\nfrom vex import *\nimport urandom\n\n# Brain should be defined by default\nbrain=Brain()\n\n# Robot configuration code\nl1 = Motor(Ports.PORT11, GearSetting.RATIO_18_1, False)\nl2 = Motor(Ports.PORT12, GearSetting.RATIO_18_1, False)\nr1 = Motor(Ports.PORT1, GearSetting.RATIO_18_1, False)\nr2 = Motor(Ports.PORT2, GearSetting.RATIO_18_1, False)\nbump = Sonar(brain.three_wire_port.a)\ncontroller_1 = Controller(PRIMARY)\npower = Bumper(brain.three_wire_port.c)\n\n\n# wait for rotation sensor to fully initialize\nwait(30, MSEC)\n\n\n# Make random actually random\ndef initializeRandomSeed():\n    wait(100, MSEC)\n    random = brain.battery.voltage(MV) + brain.battery.current(CurrentUnits.AMP) * 100 + brain.timer.system_high_res()\n    urandom.seed(int(random))\n      \n# Set random seed \ninitializeRandomSeed()\n\n\ndef play_vexcode_sound(sound_name):\n    # Helper to make playing sounds from the V5 in VEXcode easier and\n    # keeps the code cleaner by making it clear what is happening.\n    print(\"VEXPlaySound:\" + sound_name)\n    wait(5, MSEC)\n\n# add a small delay to make sure we don't print in the middle of the REPL header\nwait(200, MSEC)\n# clear the console to make sure we don't have the REPL in the console\nprint(\"\\033[2J\")\n\n#endregion VEXcode Generated Robot Configuration\n\n# ------------------------------------------\n# \n# \tProject:      VEXcode Project\n#\tAuthor:       VEX\n#\tCreated:\n#\tDescription:  VEXcode V5 Python Project\n# \n# ------------------------------------------\n\n# Library imports\nfrom vex import *\ncounter = 0\n\n\"\"\"\ndef cam(x, deg):\n    camServo = Servo() # insert correct port\n    controller = Controller()\n    global loc\n    loc = (x,deg)\n    # Adjustments\n    while run: \n        x_adj = 0\n\n        # Movement Adjustments\n        controller.buttonLeft.pressed(x_adj -= 5)\n        controller.buttonRight.pressed(x_adj += 5)\n        \n        #Checking to stop the controller inputs.\n        controller.buttonL1.pressed(run = False)\n\n        # Adjusting the Camera\n        camServo.set_position(x_adj, DEGREES)\n        loc = (x+x_adj, deg)\n        \n        #Adjunct Completion\n\"\"\"\ndef linefollowing():\n    pass\n\ndef bumpdetector():\n    global bump\n    bump = Sonar(brain.three_wire_port.a) # insert correct port\n    while bump.distance(MM) == 20:\n        r1.stop()\n        r2.stop()\n        l1.stop()\n        l2.stop()\n'''\ndef pressify():\n    power = Bumper(brain.three_wire_port.c)\n    global counter\n    global powerstate\n    counter += 1\n    if counter % 2 == 1:\n        powerstate = True\n    else:\n        powerstate = False\n'''\ndef motor():\n    global powerstate\n    global r1\n    global r2\n    global l1\n    global l2\n    global bump\n    bump = Sonar(brain.three_wire_port.a)\n    r1.set_velocity(600) # change later if necessary\n    r2.set_velocity(600) # change later if necessary\n    l1.set_velocity(600) # change later if necessary\n    l2.set_velocity(600) # change later if necessary\n    print(\"\\nSuccess! Testing...\")\n    while int(bump.distance(MM)) >= 50:\n        power = Bumper(brain.three_wire_port.c)\n        r1.spin(REVERSE)\n        r2.spin(REVERSE)\n        l1.spin(FORWARD)\n        l2.spin(FORWARD)\n    brain.screen.print(bump.distance(MM))    \n\n\ndef d3():\n    power = Bumper(brain.three_wire_port.c)\n    init = False\n    method = \"manual\"\n    brain.screen.print(\"Manual Detection\\n\")\n    motor()\n    \n\nif __name__ == \"__main__\":\n    # Initiation Function\n    brain = Brain()\n\n    brain.screen.pressed(d3)\n\n    init = True\n    while init:\n        print(\"Init Conf\")            \n            \n    ","textLanguage":"python","robotConfig":[{"port":[11],"name":"l1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[12],"name":"l2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1],"name":"r1","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[2],"name":"r2","customName":true,"deviceType":"Motor","deviceClass":"motor","setting":{"reversed":"false","fwd":"forward","rev":"reverse","gear":"ratio18_1"},"triportSourcePort":22},{"port":[1,2],"name":"bump","customName":true,"deviceType":"RangeFinder","deviceClass":"sonar","setting":{},"triportSourcePort":22},{"port":[],"name":"controller_1","customName":false,"deviceType":"Controller","deviceClass":"controller","setting":{"left":"","leftDir":"false","right":"","rightDir":"false","upDown":"","upDownDir":"false","xB":"","xBDir":"false","drive":"none","id":"primary"},"triportSourcePort":22},{"port":[3],"name":"power","customName":true,"deviceType":"Bumper","deviceClass":"bumper","setting":{"id":"partner"},"triportSourcePort":22}],"slot":0,"platform":"V5","sdkVersion":"20240802.15.00.00","appVersion":"4.0.7","minVersion":"3.1.0","fileFormat":"2.0.0","targetBrainGen":"First","v5Sounds":[{"name":"game over","url":"static/sounds/mixkit-arcade-retro-game-over-213.wav"}],"v5SoundsEnabled":false,"target":"Physical"}